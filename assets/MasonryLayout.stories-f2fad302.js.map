{"version":3,"file":"MasonryLayout.stories-f2fad302.js","sources":["../../src/lib/MasonryLayout/style.ts","../../src/lib/MasonryLayout/MasonryLayoutItem/style.ts","../../src/lib/MasonryLayout/MasonryLayoutItem/index.tsx","../../src/lib/MasonryLayout/index.tsx"],"sourcesContent":["import { styled } from 'styled-components';\nimport { CommonStyleProps, CommonTag } from '../style/common';\nimport { _MasonryLayoutProps } from '.';\n\ntype ComponentProps = _MasonryLayoutProps & CommonStyleProps;\n\nconst getGridTemplate = (size: number, responsiveSize?: number) => {\n  if (!responsiveSize) {\n    return `repeat(auto-fill, minmax(${size}px, 1fr))`;\n  }\n\n  return `repeat(auto-fill, minmax(${responsiveSize}px, 1fr))`;\n};\n\nconst getGridColumGap = ({\n  gap,\n  columnGap = '0',\n  responsiveGap,\n  responsiveColumnGap,\n}: {\n  gap?: string;\n  columnGap?: string;\n  responsiveGap?: string;\n  responsiveColumnGap?: string;\n}) => {\n  const defaultGap = gap ? gap : columnGap;\n  const responseColumnGap = responsiveGap ? responsiveGap : responsiveColumnGap;\n  if (!responseColumnGap) {\n    return defaultGap;\n  }\n\n  return responseColumnGap;\n};\n\nexport const Component = styled(CommonTag)<ComponentProps>`\n  display: grid;\n  grid-template-columns: ${({ itemSize }) =>\n    `repeat(auto-fill, minmax(${itemSize}px, 1fr))`};\n\n  grid-auto-rows: 1px;\n  grid-column-gap: ${({ gap, columnGap = '0' }) => (gap ? gap : columnGap)};\n\n  @media (min-width: 640px) {\n    grid-template-columns: ${({ itemSize, smallItemSize }) =>\n      getGridTemplate(itemSize, smallItemSize)};\n    grid-column-gap: ${({ gap, columnGap, smallGap, smallColumnGap }) =>\n      getGridColumGap({\n        gap,\n        columnGap,\n        responsiveGap: smallGap,\n        responsiveColumnGap: smallColumnGap,\n      })};\n  }\n\n  @media (min-width: 768px) {\n    grid-template-columns: ${({ itemSize, mediumItemSize }) =>\n      getGridTemplate(itemSize, mediumItemSize)};\n    grid-column-gap: ${({ gap, columnGap, mediumGap, mediumColumnGap }) =>\n      getGridColumGap({\n        gap,\n        columnGap,\n        responsiveGap: mediumGap,\n        responsiveColumnGap: mediumColumnGap,\n      })};\n  }\n\n  @media (min-width: 1024px) {\n    grid-template-columns: ${({ itemSize, largeItemSize }) =>\n      getGridTemplate(itemSize, largeItemSize)};\n    grid-column-gap: ${({ gap, columnGap, largeGap, largeColumnGap }) =>\n      getGridColumGap({\n        gap,\n        columnGap,\n        responsiveGap: largeGap,\n        responsiveColumnGap: largeColumnGap,\n      })};\n  }\n\n  @media (min-width: 1280px) {\n    grid-template-columns: ${({ itemSize, xLargeItemSize }) =>\n      getGridTemplate(itemSize, xLargeItemSize)};\n    grid-column-gap: ${({ gap, columnGap, xLargeGap, xLargeColumnGap }) =>\n      getGridColumGap({\n        gap,\n        columnGap,\n        responsiveGap: xLargeGap,\n        responsiveColumnGap: xLargeColumnGap,\n      })};\n  }\n\n  @media (min-width: 1536px) {\n    grid-template-columns: ${({ itemSize, doubleXLargeItemSize }) =>\n      getGridTemplate(itemSize, doubleXLargeItemSize)};\n    grid-column-gap: ${({\n      gap,\n      columnGap,\n      doubleXLargeGap,\n      doubleXLargeColumnGap,\n    }) =>\n      getGridColumGap({\n        gap,\n        columnGap,\n        responsiveGap: doubleXLargeGap,\n        responsiveColumnGap: doubleXLargeColumnGap,\n      })};\n  }\n`;\n","import styled from 'styled-components';\n\ninterface ComponentProps {\n  rowGap?: string;\n  smallRowGap?: string;\n  mediumRowGap?: string;\n  largeRowGap?: string;\n  xLargeRowGap?: string;\n  doubleXLargeRowGap?: string;\n  gap?: string;\n  smallGap?: string;\n  mediumGap?: string;\n  largeGap?: string;\n  xLargeGap?: string;\n  doubleXLargeGap?: string;\n  height: number;\n}\n\nconst getPaddingBottom = ({\n  gap,\n  rowGap = '0',\n  responsiveGap,\n  responsiveRowGap,\n}: {\n  gap?: string;\n  rowGap?: string;\n  responsiveGap?: string;\n  responsiveRowGap?: string;\n}) => {\n  const defaultGap = gap ? gap : rowGap;\n  const responseColumnGap = responsiveGap ? responsiveGap : responsiveRowGap;\n  if (!responseColumnGap) {\n    return defaultGap;\n  }\n\n  return responseColumnGap;\n};\n\nexport const Component = styled.div<ComponentProps>`\n  width: 100%;\n  padding-bottom: ${({ gap, rowGap = '0' }) => (gap ? gap : rowGap)};\n  grid-row-end: ${({ height }) => `span ${height}`};\n  height: max-content;\n\n  @media (min-width: 640px) {\n    padding-bottom: ${({ gap, rowGap, smallGap, smallRowGap }) =>\n      getPaddingBottom({\n        gap,\n        rowGap,\n        responsiveGap: smallGap,\n        responsiveRowGap: smallRowGap,\n      })};\n  }\n\n  @media (min-width: 768px) {\n    padding-bottom: ${({ gap, rowGap, mediumGap, mediumRowGap }) =>\n      getPaddingBottom({\n        gap,\n        rowGap,\n        responsiveGap: mediumGap,\n        responsiveRowGap: mediumRowGap,\n      })};\n  }\n\n  @media (min-width: 1024px) {\n    padding-bottom: ${({ gap, rowGap, largeGap, largeRowGap }) =>\n      getPaddingBottom({\n        gap,\n        rowGap,\n        responsiveGap: largeGap,\n        responsiveRowGap: largeRowGap,\n      })};\n  }\n\n  @media (min-width: 1280px) {\n    padding-bottom: ${({ gap, rowGap, xLargeGap, xLargeRowGap }) =>\n      getPaddingBottom({\n        gap,\n        rowGap,\n        responsiveGap: xLargeGap,\n        responsiveRowGap: xLargeRowGap,\n      })};\n  }\n\n  @media (min-width: 1536px) {\n    padding-bottom: ${({ gap, rowGap, doubleXLargeGap, doubleXLargeRowGap }) =>\n      getPaddingBottom({\n        gap,\n        rowGap,\n        responsiveGap: doubleXLargeGap,\n        responsiveRowGap: doubleXLargeRowGap,\n      })};\n  }\n`;\n","import { PropsWithChildren, useEffect, useRef, useState } from 'react';\nimport * as S from './style';\n\ninterface MasonryLayoutItemProps extends PropsWithChildren {\n  rowGap?: string;\n  smallRowGap?: string;\n  mediumRowGap?: string;\n  largeRowGap?: string;\n  xLargeRowGap?: string;\n  doubleXLargeRowGap?: string;\n  gap?: string;\n  smallGap?: string;\n  mediumGap?: string;\n  largeGap?: string;\n  xLargeGap?: string;\n  doubleXLargeGap?: string;\n}\n\nexport default function MasonryLayoutItem({\n  children,\n  ...rest\n}: MasonryLayoutItemProps) {\n  const itemRef = useRef<HTMLDivElement>(null);\n  const [height, setHeight] = useState(1);\n\n  useEffect(() => {\n    if (!itemRef.current) return;\n\n    const resizeObserver = new ResizeObserver((entries) => {\n      const [entry] = entries;\n      const { height } = entry.target.getBoundingClientRect();\n\n      setHeight(Math.round(height));\n    });\n\n    resizeObserver.observe(itemRef.current);\n\n    return () => resizeObserver.disconnect();\n  }, []);\n\n  return (\n    <S.Component height={height} {...rest} ref={itemRef}>\n      {children}\n    </S.Component>\n  );\n}\n","import { ElementType, ReactElement, createElement, forwardRef } from 'react';\nimport { PolymorphicComponentProps, PolymorphicRef } from '../types/common';\nimport * as S from './style';\nimport MasonryLayoutItem from './MasonryLayoutItem';\n\nexport interface _MasonryLayoutProps {\n  itemSize: number;\n  smallItemSize?: number;\n  mediumItemSize?: number;\n  largeItemSize?: number;\n  xLargeItemSize?: number;\n  doubleXLargeItemSize?: number;\n  gap?: string;\n  smallGap?: string;\n  mediumGap?: string;\n  largeGap?: string;\n  xLargeGap?: string;\n  doubleXLargeGap?: string;\n  rowGap?: string;\n  smallRowGap?: string;\n  mediumRowGap?: string;\n  largeRowGap?: string;\n  xLargeRowGap?: string;\n  doubleXLargeRowGap?: string;\n  columnGap?: string;\n  smallColumnGap?: string;\n  mediumColumnGap?: string;\n  largeColumnGap?: string;\n  xLargeColumnGap?: string;\n  doubleXLargeColumnGap?: string;\n}\n\nexport type MasonryLayoutProps<T extends ElementType> =\n  PolymorphicComponentProps<T, _MasonryLayoutProps>;\n\ntype MasonryLayoutComponent = <T extends ElementType>(\n  props: MasonryLayoutProps<T>\n) => ReactElement | null;\n\nconst MasonryLayout: MasonryLayoutComponent = forwardRef(function MasonryLayout<\n  T extends ElementType = 'div'\n>(\n  { css, as, children, ...rest }: MasonryLayoutProps<T>,\n  ref: PolymorphicRef<T>\n) {\n  const isChildrenArray = Array.isArray(children);\n\n  const childArray: ReactElement[] = isChildrenArray ? children : [children];\n\n  if (!isChildrenArray) {\n    return (\n      <S.Component as={as} ref={ref} style={css} {...rest}>\n        {children}\n      </S.Component>\n    );\n  }\n\n  return (\n    <S.Component as={as} ref={ref} style={css} {...rest}>\n      {childArray.map((child) => (\n        <MasonryLayoutItem {...rest}>\n          {createElement(child.type, child.props)}\n        </MasonryLayoutItem>\n      ))}\n    </S.Component>\n  );\n});\n\nexport default MasonryLayout;\n"],"names":["getGridTemplate","size","responsiveSize","getGridColumGap","gap","columnGap","responsiveGap","responsiveColumnGap","defaultGap","responseColumnGap","Component","styled","CommonTag","itemSize","smallItemSize","smallGap","smallColumnGap","mediumItemSize","mediumGap","mediumColumnGap","largeItemSize","largeGap","largeColumnGap","xLargeItemSize","xLargeGap","xLargeColumnGap","doubleXLargeItemSize","doubleXLargeGap","doubleXLargeColumnGap","getPaddingBottom","rowGap","responsiveRowGap","height","smallRowGap","mediumRowGap","largeRowGap","xLargeRowGap","doubleXLargeRowGap","MasonryLayoutItem","children","rest","itemRef","useRef","setHeight","useState","useEffect","resizeObserver","entries","entry","height2","jsx","S.Component","MasonryLayout","forwardRef","css","as","ref","isChildrenArray","childArray","child","createElement"],"mappings":"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"}